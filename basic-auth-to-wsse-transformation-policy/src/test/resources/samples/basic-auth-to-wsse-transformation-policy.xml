<policy xmlns="http://www.mulesoft.org/schema/mule/policy"
    xmlns:mule="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
    xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
    xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
    xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd 
                        http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
                        http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
                        http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
                        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd"
    id="1" policyName="basic-auth-to-wsse-transformation-policy">
    <!-- Basic to WSSE authentication transformation policy -->
    <!-- Security transformation context executed upon incoming messages -->
    		
    <before>
        <mule:set-variable variableName="skipProcessing"
            value="false" />
		<mule:logger message="Policy 1 applying 'payload instanceof java.io.InputStream' filter" level="DEBUG" />	
		<!-- continue only if the message payloadof InputStream data type is present -->
		<mule:choice>
            <mule:when expression="#[payload instanceof java.io.InputStream]">
                <mule:logger message="Payload is instanceof java.io.InputStream... "
                    level="DEBUG" />
            </mule:when>
            <mule:otherwise>
                <mule:set-variable variableName="skipProcessing"
                    value="true" />
            </mule:otherwise>
        </mule:choice>
			
        <mule:logger
            message="Policy 1 applying 'message.inboundProperties['Authorization'] != null' filter"
            level="DEBUG" />
        <!-- continue only if the Authorization header is present -->        
        <mule:choice>
            <mule:when expression="#[message.inboundProperties['Authorization'] != null]">
                <mule:logger message="Authorization Header is not null ... "
                    level="DEBUG" />
            </mule:when>
            <mule:otherwise>
                <mule:set-variable variableName="skipProcessing"
                    value="true" />
            </mule:otherwise>
        </mule:choice>
        <mule:logger
            message="Policy 1 applying 'message.inboundProperties['Authorization'].startsWith('Basic ')' filter"
            level="DEBUG" />
        <!-- continue only if the Authorization header value has a valid format -->
        
        <mule:choice>
            <mule:when
                expression="#[ ((flowVars.'skipProcessing' =='false') &amp;&amp; (message.inboundProperties['Authorization'].startsWith('Basic '))) ]">
                <mule:logger message="Authorization Header starts with Basic ... "
                    level="DEBUG" />
            </mule:when>
            <mule:otherwise>
                <mule:set-variable variableName="skipProcessing"
                    value="true" />
            </mule:otherwise>
        </mule:choice>               

        <mule:choice>
            <mule:when expression="#[flowVars.'skipProcessing' =='false']">
                <mule:set-variable variableName="payloadBck"
                    value="#[org.apache.commons.io.IOUtils.toString(payload, 'UTF-8')]" />
                <!-- extract and parse a username and a password -->
                <mule:set-payload
                    value="#[message.inboundProperties['Authorization'].substring(message.inboundProperties['Authorization'].indexOf(' '))]" />
                <mule:base64-decoder-transformer />
                <mule:set-payload value="#[new String(payload)]" />
				
				<mule:choice>
					<mule:when
						expression="#[ new String(org.mule.util.Base64.decode(message.inboundProperties['Authorization'].substring(6))).indexOf(':') != -1 ]">
						<mule:logger message="Authorization Header has a valid format ... "
							level="DEBUG" />
							
						 <mule:set-variable variableName="clientid"
							value="#[new String(org.mule.util.Base64.decode(message.inboundProperties['Authorization'].substring(6))).substring(0, new String(org.mule.util.Base64.decode(message.inboundProperties['Authorization'].substring(6))).indexOf(':'))]" />
						<mule:set-variable variableName="clientsecret"
							value="#[new String(org.mule.util.Base64.decode(message.inboundProperties['Authorization'].substring(6))).substring(new java.math.BigInteger(new String(org.mule.util.Base64.decode(message.inboundProperties['Authorization'].substring(6))).indexOf(':')).add(new java.math.BigInteger('1')).intValue())]" />
						<mule:set-variable variableName="mustUnderstandValue"
							value="0" />
						<!-- -->
						<mule:choice>
							<mule:when
								expression="#[(&quot;abc-&quot; !=null) &amp;&amp; (&quot;abc-&quot; !=&quot;&quot;)]">
								<mule:set-variable
									value="abc-#[new java.util.Random().nextInt(10000000)]"
									variableName="actor" />
							</mule:when>
							<mule:otherwise>
								<mule:set-variable variableName="actor" value="" />
							</mule:otherwise>
						</mule:choice>
						<mule:set-payload value="#[flowVars.'payloadBck']"
							mimeType="application/xml" />
						<mule:choice>
							<mule:when
								expression="#[((message.inboundProperties.'content-type' !=null)&amp;&amp;((message.inboundProperties.'content-type'.toLowerCase().contains(&quot;application/xml&quot;))||(message.inboundProperties.'content-type'.toLowerCase().contains(&quot;text/xml&quot;))))]">
								<scripting:transformer name="add-sse-transformer">
									<scripting:script name="add-sse-script" engine="Groovy">
											<![CDATA[
							def soapenv = new groovy.xml.Namespace("http://schemas.xmlsoap.org/soap/envelope/")
							def soap = new groovy.xml.Namespace("http://schemas.microsoft.com/sharepoint/soap/")
							def wsse = new groovy.xml.Namespace("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd")
							def wsu = new groovy.xml.Namespace("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd")

							xmlParser = new groovy.util.XmlParser(false,true)
							soapEnvelop=xmlParser.parseText(payload)
							soapHeader=soapEnvelop[soapenv.Header][0]
							soapBody=soapEnvelop[soapenv.Body][0]
							if (soapBody!=null){
								if (soapHeader==null){
									headerQName = new groovy.xml.QName ("http://schemas.xmlsoap.org/soap/envelope/", "Header", "soapenv")
									headerAttributesMap = [:]
									soapEnvelop.remove(soapBody)
									soapHeader = xmlParser.createNode(soapEnvelop, headerQName, headerAttributesMap)
									soapEnvelop.append(soapBody)

								}

								securityQName = new groovy.xml.QName ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security", "wsse")
								securityAttributesMap = [:]
								if (flowVars['mustUnderstandValue']!=null){
									securityAttributesMap.put(soapenv.mustUnderstandValue, flowVars['mustUnderstandValue'])
								}
								securityElement = xmlParser.createNode(soapHeader, securityQName, securityAttributesMap)

								usernameTokenQName = new groovy.xml.QName ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "UsernameToken", "wsse")
								userNameTokenAttributesMap = [:]
								if (flowVars['actor']!=null){
									userNameTokenAttributesMap.put(wsu.id, flowVars['actor'])
								}
								userNameTokenElement = xmlParser.createNode(securityElement, usernameTokenQName, userNameTokenAttributesMap)

								userNameQName = new groovy.xml.QName ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Username", "wsse")
								userNameAttributesMap = [:]
								userNameElement = xmlParser.createNode(userNameTokenElement, userNameQName, userNameAttributesMap)
								userNameElement.setValue(flowVars['clientid'])

								passwordQName = new groovy.xml.QName ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Password", "wsse")
								passwordAttributesMap = ['Type':'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText']
								userNameTokenElement = xmlParser.createNode(userNameTokenElement, passwordQName, passwordAttributesMap)
								userNameTokenElement.setValue(flowVars['clientsecret'])

								sw = new StringWriter();
								pw = new PrintWriter(sw);
								printer=new groovy.util.XmlNodePrinter(pw)
								printer.setNamespaceAware(true)
								printer.setPreserveWhitespace(true)
								printer.print(soapEnvelop)
								pw.flush()
								pw.close()
								sw.flush()
								editedXml=sw.toString()
								result =editedXml
								payload = result
							}
							return payload          
						 ]]>
									</scripting:script>
								</scripting:transformer>
							</mule:when>
							<mule:otherwise>								
								<mule:logger level="DEBUG" message="Message is not XML, letting the payload through ..." />
							</mule:otherwise>
						</mule:choice>	
					</mule:when>
					<mule:otherwise>
						<mule:set-payload value="#[flowVars.'payloadBck']" mimeType="application/xml" />
						<mule:logger level="DEBUG" message="Message Did not pass BA checks, letting it through as is ..." />
					</mule:otherwise>
				</mule:choice>
				
               
            </mule:when>
            <mule:otherwise>
                <mule:logger level="DEBUG"
                    message="Message Did not pass BA checks, letting it through as is ..." />
            </mule:otherwise>
        </mule:choice>    

		<mule:remove-variable variableName="clientid"/>
		<mule:remove-variable variableName="clientsecret"/>
		<mule:remove-variable variableName="mustUnderstandValue"/>
		<mule:remove-variable variableName="payloadBck"/>
		<mule:remove-variable variableName="skipProcessing"/>
		<mule:remove-variable variableName="actor"/>
		
		<mule:custom-transformer name="Object-to-inputstream" class="org.mule.transformer.simple.ObjectToInputStream" />
    </before>
    
    <pointcut>
        <api-platform-gw:api-pointcut apiName="soap-test" apiVersion="1" />
    </pointcut>
</policy>