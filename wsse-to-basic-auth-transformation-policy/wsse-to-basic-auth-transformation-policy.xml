<policy xmlns="http://www.mulesoft.org/schema/mule/policy" xmlns:mule="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" 
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd 
						http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd			
						http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd		
						http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
            http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd"
						id="{{policyId}}" policyName="wsse-to-basic-auth-transformation-policy">
 
  <!-- WSSE to basic authentication transformation policy -->
  <!-- Security context transformation executed upon incoming messages -->
  <mulexml:namespace-manager includeConfigNamespaces="true">
			<mulexml:namespace prefix="soapenv" uri="http://schemas.xmlsoap.org/soap/envelope/"/>
			<mulexml:namespace prefix="wsse" uri="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/>
			<mulexml:namespace prefix="wsu" uri="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"/>
			<mulexml:namespace prefix="soap" uri="http://schemas.microsoft.com/sharepoint/soap/"/>
	</mulexml:namespace-manager>

  <before>

  <mule:choice>
    <mule:when expression="#[(payload instanceof java.io.InputStream)&amp;&amp;((message.inboundProperties.'content-type' !=null)&amp;&amp;((message.inboundProperties.'content-type'.toLowerCase().contains(&quot;application/xml&quot;))||(message.inboundProperties.'content-type'.toLowerCase().contains(&quot;text/xml&quot;))))]">
    	<mule:byte-array-to-string-transformer />
  		<mule:set-variable variableName="original-payload" value="#[payload]" />
  		<mule:expression-transformer expression="xpath3('/soapenv:Envelope/soapenv:Header/wsse:Security/wsse:UsernameToken/wsse:Username', flowVars.'original-payload', 'STRING')" ignoreBadInput="true" />
  		<mule:set-variable variableName="sse-username" value="#[payload]" />
  		<mule:expression-transformer expression="xpath3('/soapenv:Envelope/soapenv:Header/wsse:Security/wsse:UsernameToken/wsse:Password', flowVars.'original-payload', 'STRING')" ignoreBadInput="true" />
  		<mule:set-variable variableName="sse-password" value="#[payload]" />
  		<mule:set-payload  value="#[flowVars.'original-payload']" />
  		<mule:set-variable variableName="unencoded-creds" value="#[flowVars.'sse-username']:#[flowVars.'sse-password']"/>

      <mule:choice>
              <mule:when expression="#[((flowVars.'sse-username' !=null) &amp;&amp; (flowVars.'sse-password' !=null)&amp;&amp;(flowVars.'sse-username' !=&quot;&quot;) &amp;&amp; (flowVars.'sse-password' !=&quot;&quot;))]">
                  <mule:set-property propertyName="Authorization" value="Basic #[org.mule.util.Base64.encodeBytes(flowVars.'unencoded-creds' .getBytes())]" />
                 <mule:choice>
                     <mule:when expression="#[{{remove-wsse}}==true]">
                         <scripting:transformer name="remove-sse-transformer">
                             <scripting:script  name="remove-sse-script" engine="Groovy"><![CDATA[
                                def soapenv = new groovy.xml.Namespace("http://schemas.xmlsoap.org/soap/envelope/")
                                def soap = new groovy.xml.Namespace("http://schemas.microsoft.com/sharepoint/soap/")
                                def wsse = new groovy.xml.Namespace("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd")
                                def wsu = new groovy.xml.Namespace("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd")
                                soapEnvelop=new groovy.util.XmlParser().parseText(payload)
                                securityElement=soapEnvelop[soapenv.Header][0][wsse.Security][0]
                                if (securityElement !=null){
                                  def parent= securityElement.parent()
                                  parent.remove(securityElement)
                                } 
                                sw = new StringWriter();
                                pw = new PrintWriter(sw);

                                printer=new groovy.util.XmlNodePrinter(pw)
                                printer.setNamespaceAware(true)
                                printer.setPreserveWhitespace(true)
                                printer.print(soapEnvelop)
                                pw.flush()
                                pw.close()
                                sw.flush()
                                result=sw.toString()
                                payload = result
                                return payload
                                
                            ]]></scripting:script>
                         </scripting:transformer>
                        <mule:logger level="DEBUG"  message="Deleted Security element  ..."/>
                      </mule:when>
                      <mule:otherwise>
                          <mule:logger level="DEBUG"  message="Skipping the deletion of the security element ..."/>
                      </mule:otherwise>
                  </mule:choice>
              </mule:when>
              <mule:otherwise>
                   <mule:logger level="INFO"  message="Credentials in SSE missing or incomplete. No Basic Authentication Headers Generated ..."/>
              </mule:otherwise>
      </mule:choice>
      <mule:remove-variable variableName="sse-username"/>
      <mule:remove-variable variableName="sse-password"/>
      <mule:remove-variable variableName="unencoded-creds"/>
      <mule:remove-variable variableName="original-payload"/>
  </mule:when>
    <mule:otherwise>
        <mule:logger level="INFO"  message="Message is not XML, letting the payload through ..."/>
    </mule:otherwise>
  </mule:choice>
</before>
  	 
  <!-- Pointcuts specify where this policy takes effect. It refers to an specific Api and Version -->	 
  <pointcut>
      <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
  </pointcut>
   
</policy>